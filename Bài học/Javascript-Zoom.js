//BU·ªîI 6
/*Javascript (JS):
    - l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh
    - T·∫°o h√†nh vi cho trang web
        + B·∫•m v√†o n√∫t => hi·ªÉn th·ªã 1 th√¥ng b√°o
        + L·∫•y d·ªØ li·ªáu n∆°i kh√°c => hi·ªÉn th·ªã tr√™n trang web
        + B·ªô ƒë·∫øm th·ªùi gian
Vi·∫øt code JS:
    - External: vi·∫øt code ·ªü file kh√°c ".js"
    - Internal: vi·∫øt code trong html <script></script>
    - Inline: vi·∫øt code trong thu·ªôc t√≠nh c·ªßa th·∫ª "onclick,...""
Bi·∫øn v√† c√°c thao t√°c:
    - ƒê·ªÉ l∆∞u tr·ªØ cho t√≠nh to√°n, x·ª≠ l√Ω logic,...
    - Truy xu·∫•t gi√° tr·ªã c·ªßa bi·∫øn
    - D√πng let, const., var (kh√¥ng d√πng) + T√™n bi·∫øn
    */


/* Example of JS*/
/*console: in l√™n m√†n h√¨nh console*/
console.log("Welcome to JS");
console.log("Welcome");
console.log("Hello üçï");

console.error("ƒê√¢y l√† 1 l·ªói"); /*m√†u ƒë·ªè*/
console.warn("ƒê√¢y l√† c·∫£nh b√°o"); /*m√†u v√†ng*/

/* T√™n bi·∫øn: 
    + b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i; d·∫•u "_", d·∫•u "$"
    + kh√°c bi·ªát gi·ªØa ch·ªØ hoa v√† ch·ªØ th∆∞·ªùng
    + kh√¥ng tr√πng v·ªõi t√™n bi·∫øn kh√°c t·∫°i "website w3school" 
    + trong ƒë·∫∑t t√™n bi·∫øn, c√≥ th·ªÉ ƒë·∫∑t t√™n s·ªë, tuy nhi√™n ph·∫£i sau "ch·ªØ" vd: name1 

Quy t·∫Øc ƒë·∫∑t t√™n bi·∫øn: 
    + camelCase Vd: myName, hasGirlfriend
    + id_card
LET  vs CONST: const kh√¥ng khai b√°o th√™m bi·∫øn nh∆∞ "let" => s·∫Ω hi·ªÉn th·ªã "Uncaught TypeError: Assignment to constant variable" */

let name; // khai b√°o bi·∫øn//
name = "Gi√° tr·ªã m·ªõi c·ªßa name"; // g√°n gi√° tr·ªã cho bi·∫øn//
name = "Hello morning"; //hi·ªÉn th·ªã gi√° tr·ªã theo th·ª© t·ª± t·ª´ tr√™n xu·ªëng d∆∞·ªõi tr∆∞·ªõc khai b√°o console//
console.log(name); // hi·ªÉn th·ªã gi√° tr·ªã c·ªßa bi·∫øn "name" l√™n m√†n h√¨nh console//
let age = 10; // khai b√°o v√† g√°n gi√° tr·ªã cho bi·∫øn//

let something ="a";
// let something ="A";

const hello = "Khai b√°o const" //h·∫±ng s·ªë: kh√¥ng th·ªÉ thay ƒë·ªïi gi√° tr·ªã//
// console.log(hello);

/* Ki·ªÉu d·ªØ li·ªáu: primitive types
    + number: ki·ªÉu s·ªë => th·ª±c hi·ªán c√°c ph√©p to√°n s·ªë h·ªçc
    + string: ki·ªÉu chu·ªói k√Ω t·ª± => Th·ª±c hi·ªán thao t√°c vs vƒÉn b·∫£n (n·ªëi/t√°ch/ thay th·∫ø t·ª´ vƒÉn b·∫£n)
    + Boolean: ki·ªÉu nh·ªã ph√¢n => c√≥ 2 gi√° tr·ªã: True, False
    + null: ki·ªÉu r·ªóng
    + undefined: ki·ªÉu d·ªØ li·ªáu kh√¥ng x√°c ƒë·ªãnh
*/
//Number//
let number = 28;
console.log(number);
//String//
let slogan = "okay";
console.log(slogan)
//Boolean//
let hasGirlfriend = false;
console.log(hasGirlfriend)
//null//
let girlfriend = null;
console.log(girlfriend)
//undefined: khi kh√¥ng khai b√°o bi·∫øn//
let future;
console.log(future)

/*TO√ÅN T·ª¨: */
// Ki·ªÉu number://
let a= 500
let b= 10;

console.log(a + b); 
console.log(a - b);
console.log(a * b);
console.log(a / b);
console.log(a ** b); // lu·ªπ th·ª´a: a^b//
console.log(a++); // tƒÉng l√™n 1//
console.log (b--); // gi·∫£m ƒëi 1//
console.log (x=y); // = >>g√°n gi√° tr·ªã y v√†o x
console.log (x = x + y); //+= >> x = x + y; c·ªông th√™m v√†o x gi√° tr·ªã y
console.log (x = x - y); // - =
console.log (x = x * y); // * =
console.log (x = x % y); // % =
console.log (x = x ?? y); //l√† ph√©p g√°n khi null. N·∫øu x b·∫±ng null th√¨ gi√° tr·ªã y g√°n cho x, n·∫øu x ƒë√£ kh√°c null th√¨ kh√¥ng thay ƒë·ªïi g√¨//
Math.sin(a)
Math.cos (b)
// (++b) kh√°c (b++)//


//Ki·ªÉu string: n·ªëi vƒÉn b·∫£n//
let textA ="Welcome"
let textB =" Hura"
textA + textB; 

//So s√°nh: kh√¥ng so s√°nh ch·ªØ vs s·ªë//
let a = 10;
let b = 'ch·ªØ'; 
let c = 20;

console.log(a == b); //so s√°nh cho ra 1 gi√° tr·ªã boolean: True or False//
console.log(a === b); //b·∫±ng gi√° tr·ªã v√† ki·ªÉu d·ªØ li·ªáu
//V√≠ d·ª•:
let a = 5; // s·ªë
let b = "5"; //chu·ªói
//==: 
console.log (a==b) //*ra k·∫øt qu·∫£ True
console.log (a===b) //* ra k·∫øt qu·∫£ false gi·ªëng gi√° tr·ªã nh∆∞ng kh√°c ki·ªÉu


console.log(a != b); //kh√¥ng b·∫±ng
//so s√°nh kh√°c gi√° tr·ªã (d·∫•u kh√°c trong javascript ch·ªâ so s√°nh v√† gi√° tr·ªã kh√¥ng x√©t ƒë·∫øn ki·ªÉu)//
console.log(a !== b); // kh√¥ng b·∫±ng gi√° tr·ªã v√† ki·ªÉu d·ªØ li·ªáu
//1. V√≠ d·ª• c·ªßa "! ="
let c = 5; // s·ªë
let d = "5"; //chu·ªói
//==: 
console.log (5 == 10) //*ra k·∫øt qu·∫£ True (c√πng ki·ªÉu)
console.log (5 == "5") //* ra k·∫øt qu·∫£ false (kh√°c ki·ªÉu)
//2. V√≠ d·ª• c·ªßa "! =="
console.log (5! == 10) //*ra k·∫øt qu·∫£ False (kh√°c gi√° tr·ªã)
console.log (5! == "5") //* ra k·∫øt qu·∫£ True (c√πng ki·ªÉu c√πng gi√° tr·ªã)


console.log(a > b);
console.log(a >=b);
console.log(a==b) && (b==c) // v√† (t·∫•t c·∫£ ƒë·ªÅu ƒë√∫ng)
console.log(a==b) || (b==c) // ho·∫∑c (1 trong 2 ƒë√∫ng l√† s·∫Ω ƒë√∫ng)
console.log (a==b) //ph·ªß ƒë·ªãnh
console.log (x%y) //%: l·∫•y ph·∫ßn d∆∞ c·ªßa ph√©p chia


//Ch√∫ √Ω://
const a = 5;

function test() {
    console.log("this is a:" +a);
    const a=2;
}

test()

let b = 7
console.log(b++) //8//
console.log (b) //7//

let b = 7;
console.log(++b) //8//

//========================================================================================================================
//BU·ªîI 7
//1. nh·∫≠p d·ªØ li·ªáu t·ª´ b√†n ph√≠m v√† g√°n gi√° tr·ªã v·ª´a nh·∫≠p v√†o trong 1 bi·∫øn
// <!-- let a = "hello";
// let b = 10;
// let input = prompt("H√£y nh·∫≠p gi√° tr·ªã ƒë·ªÉ g√°n gi√° tr·ªã cho bi·∫øn 'input':"); //input: string
// console.log("B·∫°n v·ª´a nh·∫≠p v√†o" + " " + input); -->

// let x = Number (prompt("Nh·∫≠p s·ªë x"));
// let y = Number(prompt("Nh·∫≠p s·ªë y"));
// let z = x + y;
// console.log(z);
// console.log(input);


//2. Block of code (kh·ªëi l·ªánh)
  /* Kh·ªëi l·ªánh:
  /* Ph·∫°m vi c·ªßa bi·∫øn: khai b√°o v·ªõi "let","const" trong 1 kh·ªëi l·ªánh kh√¥ng th·ªÉ t·ªìn t·∫°i b√™n ngo√†i kh·ªëi l·ªánh ƒë√≥*/
  // V√≠ d·ª•:
  let name ="Ai Thy";
  {
    // b√™n trong 1 kh·ªëi l·ªánh
    // let name = "Someone";
    // let age1 = 27;  
    // {
    //     let address = "TPHCM"
    //     // age: t·ªìn t·∫°i ·ªü ch·ªó n√†y
    //     // adress: t·ªìn t·∫°i dc ·ªü trong n√†y
    //     console.log(address);
    // }
    // console.log (age1)
  }
  console.log (age)- kh√¥ng t·ªìn t·∫°i ·ªü ngo√†i let name

//3. C√¢u l·ªánh ƒëi·ªÅu ki·ªán: if-else/ if - else if
if (condition) {
    // block of code if condition is true
} else {
    // block of code if condition is false
}
V√≠ d·ª•: N·∫øu age < 18 th√¨ kh√¥ng cho v√†o; n·∫øu age > 18 => cho v√†o
 let age2 = prompt ("Nh·∫≠p v√†o tu·ªïi c·ªßa b·∫°n")
  if (age2 <18) {
    console.log ("Kh√¥ng cho v√†o")
  } else {
    console.log("cho v√†o")
  }
if (condition 1) {
    // block of code if condition is true
} else if (considition 2) {
    // block of code if condition is true
} else (condition ...) {}
V√≠ d·ª•: Ph√¢n lo·∫°i h·ªçc sinh: 1, 2, 3
let rank = prompt ("Nh·∫≠p v√†o ph√¢n lo·∫°i")
if(rank == "A"){
    console.log('To√°n-Ho√°-L√Ω')
} else if (rank == "B"){
    console.log ("To√°n-Ho√°-Sinh")
} else if (rank == "C"){
    console.log ("VƒÉn-S·ª≠-ƒê·ªãa")
} else (rank == "D"){
    console.log("To√°n-VƒÉn-Anh")
} 

let text = promt ("Nh·∫≠p v√†o 1 chu·ªói")
if (text.length < 8) {
    console.log ("chu·ªói ng·∫Øn qu√°");
}else {
    console.log ("chu·ªói n√†y ƒë∆∞·ª£c")
}
    

//4. V√≤ng l·∫∑p: th·ª±c hi·ªán 1 kh·ªëi l·ªánh nhi·ªÅu l·∫ßn
/* For: 
- bi·∫øt s·ªë l·∫ßn l·∫∑p
- Th∆∞·ªùng d√πng trong:
    + Duy·ªát m·∫£ng
    + S·∫Øp x·∫øp ƒë∆°n gi·∫£n
    + In ra 1 d√£y c√≥ quy lu·∫≠t
    + Gi·∫£i thu·∫≠t t√¨m ki·∫øm */
/* for (<statement1>;<statement2>; <statement3>)
   + Statement 1: let i = ... : ƒëi·ªÅu ki·ªán b·∫Øt ƒë·∫ßu
   + Statement 2: ƒëi·ªáu ki·ªán ch·∫°y (vd: i <= 50)
   + Statement 3: i++ ho·∫∑c i-- */
 
// v√≠ d·ª•: In ra d√≤ng "I love you" 10 l·∫ßn , m·ªói d√≤ng c√≥ ƒë√°nh s·ªë th·ª© t·ª±
for(let count = 1; count <= 10; count++){
    console.log(count + " . I love you")
}
// //H√£y t√≠nh t·ªïng c√°c s·ªë t·ª´ 1 ƒë·∫øn 50
let sum = 0;
for (let i1 = 1; i1 <= 50; i1++ ){
    sum = sum + i1; //bi·∫øn gi√° tr·ªã "sum" theo v√≤ng l·∫∑p
}
console.log (sum)

for (let i2 = 100; i2 >= 100; i2--){
 console.log (i2)
}


/* while: 
+ kh√¥ng bi·∫øt s·ªë l·∫ßn l·∫∑p
+ th∆∞·ªùng c√≥ 1 ƒëi·ªÅu ki·ªán ƒë·ªÉ ti·∫øp t·ª•c v√≤ng l·∫∑p (ƒê√∫ng th√¨ ti·∫øp v√≤ng l·∫∑p, Sai th√¨ d·ª´ng v√≤ng l·∫Øp)*/
let num = 10;
while (num >= 6) {
    console.log(num)
    num = Math.floor(Math.random()*10)
}

// In ra d√£y 1 ƒë·∫øn 200
let index = 1;
while (index <= 200) {
    console.log(index);
    index ++;
}

//
let s = prompt ("chu·ªói s");
let l = prompt ("s·ªë l");
while (s.length < 1) {
    s += 'a';
}
console.log (s);

//Nh·∫≠p v√†o 2 s·ªë 0 <= x < y <=100
let x = prompt (" Nh·∫≠p s·ªë x");
let y = prompt (" Nh·∫≠p s·ªë y");
if (
    x >= 0
    && x < y
    && y <= 100
){
    while (x < y) {
        x++;
        y--;
    }
    console.log(x,y)
} else {
    console.log ("Nh·∫≠p sai x v√† y")
}


/* Do {} While ()
- kh√¥ng bi·∫øt s·ªë l·∫ßn l·∫∑p
- Gi·ªëng while
- Th·ª±c hi·ªán kh·ªëi l·ªánh do √≠t nh·∫•t 1 l·∫ßn */
// let a = 5;
// do {
//     console.log("abc")
// } while (a>5);
// // ch·∫°y qua "do" 1 l·∫ßn => r·ªìi sao ch√©p ƒëi·ªÅu ki·ªán, n·∫øu ki·ªán sai th√¨ v·∫´n ra "do"

// let b = 5;
// while(b>5){
//     console.log("abc")
// }
//cha·ªµ while => sai => kh√¥ng ra >> undefined
//========================================================================================================================
//BU·ªîI 8:
/*1. Array (m·∫£ng):
- M·ªói ph·∫ßn t·ª≠ trong array c√≥ 1 index
- Ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n c√≥ index = 0
- D√πng array li√™n quan t·ªõi danh s√°ch; t·∫≠p h·ª£p
vd: T√¨m s·ªë l·ªõn nh·∫•t, s·∫Øp x·∫øp tƒÉng d·∫ßn, t√≠nh t·ªïng doanh thu, v·∫Ω bi·ªÉu ƒë·ªì, t√≠nh ƒëi·ªÉm trung b√¨nh

C√∫ ph√°p khai b√°o:
let array1 = [] // kh√¥ng c√≥ ph·∫ßn t·ª≠ n√†o >> block
let array2 = [<Ph·∫ßn t·ª≠ 1>, <Ph·∫ßn t·ª≠ 2>, ...]*/

let names1 = [
    "IU"
    "Taylor"
    "Swift"
    "John"
] console.log(names1)

let isRich= false;
let isHandsome = true;
let hasGirlfriend = false;

let features = [isRich, isHandsome, hasGirlfriend]
//isRich = true;
//truy xu·∫•t gi√° tr·ªã 1 ph·∫ßn b·∫•t k·ª≥ trong m·∫£ng >>> Ph·∫ßn t·ª≠ th·ª© 2 (ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n = 0)
console.log (features[0]); // l·∫•y gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠ th·ª© 1 trong array
console.log(features[1]); //l·∫•y gi√° tr·ªã c·ªßa ph·∫ßn t·ª≠ th·ª© 2 trong array

//thay ƒë·ªïi gi√° tr·ªã index b·∫•t k·ª≥ trong m·∫£ng?
names [0] ="Hello uWorld";
names [4] = "goodbye everyone";
console.log (names1)

console.log (features)

let array1 = ['a';'b';'c']
let array2 = ['a';'b';'c']

let array3=array1;
//ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa m·∫£ng?
console.log (typeof (array1)) //KQ: objective
console.log (array1 + array2) // a,b, // ch∆∞∆°ng tr√¨nh t·ª± ƒë·ªông √©p ki·ªÉu m·∫£ng v·ªÅ string khi th·ª±c hi·ªán ph√©p c·ªông  
console.log (array1 == array2) //KQ: false
console.log (array1 == array3) //KQ: True. Tuy nhi√™n, nguy hi·ªÉm kh√¥ng n√™n d√πng

array1 [0] = "Hello" //Thay ƒë·ªïi gi√° tr·ªã c·ªßa index
console.log (array1)

//ho√°n ƒë·ªïi gi√° tr·ªã c·ªßa 2 ph·∫ßn t·ª≠ trong m·∫£ng
let tmp = names1[0];
names1 [0] = names1 [3];
names1 [3] = tmp;
console.log(names1)

/*Duy·ªát m·∫£ng: 
- duy·ªát qua t·ª´ng index trong array
- ti·ªÅn ƒë·ªÅ cho c√°c thao t√°c: t√¨m ki·∫øm, l·ªçc, bi·∫øn ƒë·ªïi,
- d√πng v√†o l·∫∑p 
for (let i=0; i <arr.length, i++)
for (const item of arr)*/

for(let i =0; i< names1.length; i++) {
    let stt= i+1;
    // console.log(stt + ". " +names1[i])

    let name2 = names1[i];
    if (name == 'Taylor' || name = 'IU'){ //T√¨m gi√° tr·ªã ƒë·ªÉ repeat theo s·ªë l·∫ßn c·ªßa i
        console.log(stt + ". " + name2)
    }
}

//for..of
for (const name2 of names1) {
    //l√†m vi·ªác v·ªõi name2 trong n√†y
    i++;
}

const numbers = [1,7,8,-3,6,10,9]
// in ra s·ªë ch·∫µn trong numbers
for (let i = 0; i < numbers.length; i++){
    const number = numbers[i]; //khai b√°o c√°c ph·∫ßn t·ª≠ trong numbers

    if(number%2 ==0) console.log(number); /// KQ c√≥ 8,6,10 : 2 >> c√≥ s·ªë d∆∞ = 0
}
//t√≠nh t·ªïng
const sum = 0;
for (let i = 0; i < sum.length; i++){
    const number = numbers [i];
    sum+= number;
}
console.log(sum)

//t√¨m ph·∫ßn t·ª≠ nh·ªè nh·∫•t
const min = numbers [0];
for (let i = 0; i < numbers.length; i++){
    const number = numbers 
    if ( min > number) min = number;
}
console.log(min)

//Th√™m v√† xo√° index trong array
/* 
- Th√™m:
    + unshift: ƒë·∫ßu array
    + push: cu·ªëi array
    + 
- Xo√°
    + shift: xo√° first index trong ƒë·∫ßu array
    + pop: xo√° 1 index trong ƒë·∫ßu array
*/
//th√™m 3 s·ªë v√†o ƒë·∫ßu m·∫£ng
numbers.unshift (-2,11,12)
console.log (numbers);
//th√™m 3 s·ªë v√†o cu·ªëi m·∫£ng
numbers.push (5,3,2,1);
console.log (numbers);
//xo√° 1 index ƒë·∫ßu ti√™n trong m·∫£ng
let deletedFirstNumber = numbers.shift()
console.log ("Gi√° tr·ªã ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n b·ªã xo√°" + deletedFirstNumber)
//xo√° 1 index cu·ªëi trong m·∫£ng
let deletedLastNumber = numbers.pop()
console.log ("Gi√° tr·ªã ph·∫ßn t·ª≠ cu·ªëi b·ªã xo√°" + deletedLastNumber)

//Xo√° ho·∫∑c th√™m ph·∫ßn t·ª≠ v√†o gi·ªØa array >> splice >>> Array.prototype.splice()

// Ph∆∞∆°ng th·ª©c Array Iteration: T√¨m ki·∫øm/L·ªçc/Bi·∫øn ƒë·ªïi 
//1. A.map:
//2. A.fliter:
//3. A.final:
//4. A.findIndex: t√¨m v·ªã tr√≠
//5. A.fill: Bi·∫øn ƒë·ªïi
//6. A.copyWithin:
//7. A.Some: ki·ªÉm tra c√°c ph·∫ßn t·ª≠ xem c√≥ tho·∫£ m√£n ƒëi·ªÅu ki·ªán >> Ch·ªâ c·∫ßn 1 ph·∫ßn t·ª≠ tho·∫£ m√£n th√¨ True
//8. A.Every: ki·ªÉm tra c√°c ph·∫ßn t·ª≠ xem c√≥ tho·∫£ m√£n ƒëi·ªÅu ki·ªán >> T·∫§t c·∫£ ph·∫ßn t·ª≠ ph·∫£i tho·∫£ m√£n th√¨ True
//9. A.reduce:

let num = [1,10,5,6,-2]
num.map (item => item ** 2) //KQ: 1,100,25,36,-4
num.filter (item => item > 3) //KQ: 10,5,6

//Thu·∫≠t to√°n: BUBBLE SORT

//========================================================================================================================
//Bu·ªïi 9: OBJECT & FUNCTION
/* 1. M·∫£ng ƒëa chi·ªÅu (Multi-Dimension Arrray):
- M·∫£ng trong M·∫£ng
- M√¥ t·∫£ ma tr·∫≠n to√°n h·ªçc, s·ªë li·ªáu tƒÉng tr∆∞·ªüng */
// V√≠ d·ª•: 
// D·ªØ li·ªáu c·ªßa nƒÉm: theo column
// D·ªØ li·ªáu theo qu√Ω: theo row
let growth ={
    [5,8,9,10];
    [2,7,1,9];
    [5,2,10,6];
}

/*2. OBJECT:
- Object = Thu·ªôc t√≠nh (ƒê·∫∑c ƒëi·ªÉm-Perspective) + Ph∆∞∆°ng th·ª©c (H√†nh vi-Behaviours)
- M√¥ t·∫£ chi ti·∫øt v√† l∆∞u tr·ªØ d·ªØ li·ªáu ph·ª©c t·∫°p
- V√≠ d·ª•
// Thu·ªôc t√≠nh: T√™n ; Gi√° tr·ªã c·ªßa thu·ªôc t√≠nh: Apple
// Thu·ªôc t√≠nh: Gi√° ; Gi√° tr·ªã c·ªßa thu·ªôc t√≠nh: $1500
- Khi n√†o d√πng Object?
    + L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP)
    + Cho c√°c b√†i to√°n li√™n quan t·ªõi s·ª± ph·ª©c t·∫°p c·ªßa data
V√≠ d·ª•: Danh s√°ch sinh vi√™n (T√™n, gi·ªõi t√≠nh, ƒëi·ªÉm cu·ªëi k·ª≥)=> L·∫•y t√™n sv c√≥ ƒëi·ªÉm cu·ªëi k·ª≥ cao nh·∫•t*/

//2.1.C√°ch khai b√°o:
/*let <t√™n bi·∫øn> ={
    <key-1>: <value-1>;
    <key-2>: <value-2>;
        ...
}*/
const thePet{ //m·∫´u chung cho thu·ªôc t√≠nh pet ·ªü introduction1 v√† 2
    pet: {
        age: 2;
        nationality: British;
    }
}
const introduction1 = { // ƒë·∫∑c ƒëi·ªÉm (thu·ªôc t√≠nh)
    fullName: "Tran Ai Thy"; // H√†nh vi (ph∆∞∆°ng th·ª©c)
    //"1-first-name": "Thy";
    age: 27; // H√†nh vi (ph∆∞∆°ng th·ª©c)
    dob: "07/09/1996" // H√†nh vi (ph∆∞∆°ng th·ª©c)
    address: "TPHCM" // H√†nh vi (ph∆∞∆°ng th·ª©c)
    pet: thePet
}
const introduction2 = { // ƒë·∫∑c ƒëi·ªÉm (thu·ªôc t√≠nh)
    fullName: "Tran Ai Thy"; // H√†nh vi (ph∆∞∆°ng th·ª©c)
    //"1-first-name": "Thy";
    age: 27; // H√†nh vi (ph∆∞∆°ng th·ª©c)
    dob: "07/09/1996" // H√†nh vi (ph∆∞∆°ng th·ª©c)
    address: "TPHCM" // H√†nh vi (ph∆∞∆°ng th·ª©c)
    pet: thePet
//introduction1 kh√¥ng b·∫±ng introduction2 do save ·ªü 2 ƒë·ªãa ch·ªâ kh√°c nhau
// Ngo·∫°i tr·ª´:
const introduction3 = introduction1
console.log (introduction1 == introduction2 ); 
console.log (introduction1 == introduction3 );

//2.2.nC√°ch s·ª≠ d·ª•ng Object
//L·∫•y ra gi√° tr·ªã c·ªßa thu·ªôc t√≠nh "Fullname" trong introduction1
console.log(introduction1.fullName); //ho·∫∑c
console.log (introduction1 ['fullName']);
//ho·∫∑c
const key = "fullName"
console.log (introduction1 [key]);

consol.log(introduction1.pet == introduction2.pet) //KQ: true

//Thi·∫øt l·∫≠p/thay ƒë·ªïi/xo√° gi√° tr·ªã thu·ªôc t√≠nh

//A. Th√™m thu·ªôc t√≠nh isHandsome cho introduction1
introduction1.isHandsome = true; //ho·∫∑c
introduction1["isHandsome"] = true;

//B. Thay ƒë·ªïi gi√° tr·ªã thu·ªôc t√≠nh "fullName" trong introduction1
introduction1.fullName = "Thy Tran"; //ho·∫∑c
introduction1['fullName'] = "Thy Tran";
//C. Xo√° thu·ªôc t√≠nh dob trong introduction1
delete introduction1.dob
console.log(introduction1);

//Duy·ªát object: duy·ªát qua t·ª´ng thu·ªôc t√≠nh & ph∆∞∆°ng th·ª©c trong object
// D√πng let...in
for (let key in introduction1) {
    console.log("ƒê·∫∑c ƒëi·ªÉm" + key + "c√≥ gi√° tr·ªã l√†:" + introduction1.key);
    //ho·∫∑c
    console.log("ƒê·∫∑c ƒëi·ªÉm" + key + "c√≥ gi√° tr·ªã l√†:" + introduction1[key]);
}
//key: bi·∫øn
//introduction1.key ho·∫∑c introduction1 [key] : l·∫•y thu·ªôc t√≠nh ho·∫∑c truy xu·∫•t thu·ªôc t√≠nh key trong introduction1 => d√πng ƒë·ªÉ check

//**************************** 

/*3. FUNCTION:
- ƒê√≥ng g√≥i 1 ƒëo·∫°n code ƒë·ªÉ t√°i s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn
- C√≥ thu·ªôc t√≠nh hoisting
- d√πng function khi n√†o?
    + L·∫¨p tr√¨nh h∆∞·ªõng c·∫•u tr√∫c (POP)
    + Chia nh·ªè ch∆∞∆°ng tr√¨nh th√†nh c√°c functions. M·ªói functions c√≥ 1 ch·ª©c nƒÉng ri√™ng bi·ªát
- C√°c functions s·ª≠ d·ª•ng nhi·ªÅu l·∫ßn => n√™n th·ª±c hi·ªán 1 ch·ª©c nƒÉng duy nh·∫•t
- Vi·ªác chia functions tu·ª≥ theo kinh nghi·ªám t·ª´ng ng∆∞·ªùi
- 1 function kh√¥ng d√πng qu√° 100 d√≤ng
- Khai b√°o function: /Nhi·ªÅu input nh∆∞ng ra ch·ªâ c√≥ 1 output
    + Tham s·ªë (Input)
    + Gi√° tr·ªã tr·∫£ v·ªÅ (output) 
    + 4 ki·ªÉu functions: 
        1/ No input; no output
        2/ 2 inputs; no output
        3/ No input; 1 output
        4/ 2 inputs. 1 output 
*/
//v√≠ d·ª•: Khai b√°o function nh·∫≠p v√† check 1 s·ªë
// NaN = NaN => False
let a = 0;
let b = 0;
function inputNumber(label){
    let input = NaN; //NaN: kh√¥ng ph·∫£i l√† s·ªë
    do{
        input = Number(prompt("Nh·∫≠p s·ªë v√†o ƒë√¢y" + label + ": "))
    } while (isNaN (input)) //Kh√¥ng ph·∫£i l√† s·ªë th√¨ nh·∫≠p khi n√†o l√† s·ªë

    return input;  //khi x√†i return th√¨ coi nh∆∞ k·∫øt th√∫c 
    console.log("th·ª±c thi kh√¥ng")
}
//g·ªçi function inputNumber
a = inputNumber ('a');
b = inputNumber ('b');
console.log (a+b)

//V√≠ d·ª•:
const myName = "Thy";
const myName2 = "abc";
function greeting(name) {
    console.log(`Hello, ${name}`);
}
greeting(myName); //KQ: Thy
greeting(myName2); //Kq: abc

//Callback: 
// After 3 seconds, call a function
function doSomething (){
    console.log ("Do sth here")
}
function sayhello (){
    console.log ("Hello World")
}
function executeAfterSeconds (seconds, work){
    console.log ("th·ª±c thi sau khi" + seconds + "gi√¢y");
    setTimeout(work, seconds *1000);
}
executeAfterSeconds (3,sayhello); // seconds: 3; work: sayhello
executeAfterSeconds (4,doSomething);
//setTimeout kh√¥ng ƒë∆∞a v√†o stack: th·ª±c hi·ªán h√†m ƒë·ªìng b·ªô tr∆∞·ª£c v√† b·∫•t ƒë·ªìng b·ªô sau
// v√≠ d·ª•:
/* KQ tr·∫£ v·ªÅ:
- Th·ª±c thi sau khi 3 gi√¢y
- Th·ª±c thi sau khi 4 gi√¢y
- Do Sth here
- Hello World*/

/*Arrow function
- l√† function nh∆∞ng kh√¥ng c√≥ context this
- C√°ch khai b√°o: */
const doAnything =() =>{

}
const doNothing = () => "Hello";
//ho·∫∑c
const doNothing2 = (a,b,c,d) => {
    return "hello";
};
// function sum (a,b,c) {
//     return a + b + c;
// }
//ho·∫∑c
const sum (a,b,c) => a + b + c;

const thyTran ={
    name: "thy Tran",
    flir: () =>{ //Arrow function
        console.log (this); 
        //this ƒë·∫°i di·ªán cho "window" 
    }
    run: function {
        console.log(this);
        //this ƒë·∫°i di·ªán cho thyTran
    }
}
thyTran.flir ();
thyTran.run ();
//---------------------------------------------------------------------------------------------------------------------

